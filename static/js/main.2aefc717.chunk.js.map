{"version":3,"sources":["constants/routes.ts","components/Apps.tsx","components/common/Icons.tsx","components/Header.tsx","constants/reinforcementBarTypes.ts","components/safety-factor/SafetyFactorForm.tsx","components/safety-factor/index.tsx","components/Router.tsx","serviceWorker.ts","index.tsx"],"names":["HOME","SAFETY_FACTOR","Apps","react","className","react_router_dom","to","routes","Button","variant","size","block","Icons","props","icon","name","xmlns","x","y","width","height","viewBox","id","d","fill","getIcon","inline","routeToNameMap","_routeToNameMap","Object","defineProperty","withRouter","currentPath","location","pathname","replace","Navbar","bg","Brand","Nav","common_Icons","reinforcementBarTypes","value","area","steelGradeOptions","concreteStressOptions","INITIAL_STATE","formData","columnLength","loadOnColumn","columnBreadth","numberOfFloors","gradeOfSteel","gradeOfConcrete","selectedReinforcementBar","strengthOfColumn","safetyFactor","SafetyFactorForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_resetForm","setState","_handleChange","field","prevState","objectSpread","_calculateSafetyFactor","event","preventDefault","_this$state$formData","state","reinforcementBarArea","_getReinforcementBarArea","scrollToBottom","find","bar","_this2","_this$state","_this$state$formData2","Form","Group","Label","Row","Col","Control","type","placeholder","concat","onChange","target","as","map","opt","index","key","onClick","Card","Header","Body","Title","Text","toFixed","React","Router","scrollbar","_setBodyHeight","titleBarElement","document","getElementById","titleBarElementHeight","offsetHeight","bodyHeight","window","innerHeight","_scrollToBottom","components_Header","lib_default","a","style","ref","react_router","exact","path","component","render","safety_factor","Boolean","hostname","match","ReactDOM","components_Router","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2aefc717.chunk.js","sourcesContent":["export const HOME = '/civil-calculator';\nexport const SAFETY_FACTOR = '/civil-calculator/safety-factor';\n","import * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport * as routes from '../constants/routes';\n\nconst Apps = () => {\n  return (\n    <div className=\"p-10\">\n      <Link to={routes.SAFETY_FACTOR}>\n        <Button variant=\"secondary\" size=\"lg\" block>\n          Calculate safety factor\n        </Button>\n      </Link>\n    </div>\n  );\n};\n\nexport default Apps;\n","import * as React from 'react';\n\nfunction getIcon(name: string) {\n  switch (name) {\n    case 'hamburger':\n      return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n          <g id=\"surface1\">\n            <path d=\"M 4 7 L 4 9 L 28 9 L 28 7 Z M 4 15 L 4 17 L 28 17 L 28 15 Z M 4 23 L 4 25 L 28 25 L 28 23 Z \" />\n          </g>\n        </svg>\n      );\n\n    case 'back':\n      return (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          x=\"0px\"\n          y=\"0px\"\n          width=\"35\"\n          height=\"35\"\n          viewBox=\"0 0 50 50\"\n          fill=\"#ffffff\"\n        >\n          <g id=\"surface1\">\n            <path d=\"M 34.960938 2.980469 C 34.441406 2.996094 33.949219 3.214844 33.585938 3.585938 L 13.585938 23.585938 C 12.804688 24.367188 12.804688 25.632813 13.585938 26.414063 L 33.585938 46.414063 C 34.085938 46.9375 34.832031 47.148438 35.535156 46.964844 C 36.234375 46.78125 36.78125 46.234375 36.964844 45.535156 C 37.148438 44.832031 36.9375 44.085938 36.414063 43.585938 L 17.828125 25 L 36.414063 6.414063 C 37.003906 5.839844 37.183594 4.960938 36.863281 4.199219 C 36.539063 3.441406 35.785156 2.957031 34.960938 2.980469 Z \" />\n          </g>\n        </svg>\n      );\n\n    default:\n      return null;\n  }\n}\n\ninterface IconsProps {\n  name: string;\n  className?: string;\n  inline?: boolean;\n}\n\nconst Icons = (props: IconsProps) => {\n  const icon = getIcon(props.name);\n\n  return props.inline ? <span className={props.className}>{icon}</span> : <div className={props.className}>{icon}</div>;\n};\n\nexport default Icons;\n","import * as React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport Icons from './common/Icons';\nimport * as routes from '../constants/routes';\n\nconst routeToNameMap = {\n  [routes.HOME]: 'Civil Calculator',\n  [routes.SAFETY_FACTOR]: 'Safety factor'\n};\n\nconst Header = (props: RouteComponentProps<{}>) => {\n  const currentPath = props.location.pathname.replace(/\\/$/, '');\n\n  return (\n    <Navbar bg=\"primary\" variant=\"dark\" id=\"titleBarElement\">\n      <Navbar.Brand>{routeToNameMap[currentPath]}</Navbar.Brand>\n      <Nav className=\"mr-auto\" />\n      {currentPath !== routes.HOME && (\n        <Link to=\"/\">\n          <Icons name=\"back\" />\n        </Link>\n      )}\n    </Navbar>\n  );\n};\n\nexport default withRouter(Header);\n","const reinforcementBarTypes = [\n  { value: '4Φ12', area: 452.3893421169302 },\n  { value: '4Φ16', area: 804.247719318987 },\n  { value: '6Φ12', area: 678.5840131753953 },\n  { value: '4Φ16 + 2Φ12', area: 1030.442390377452 },\n  { value: '4Φ16 + 4Φ12', area: 1256.6370614359173 },\n  { value: '8Φ16', area: 1608.495438637974 },\n  { value: '4Φ20 + 2Φ16', area: 1658.7609210954108 },\n  { value: '4Φ20 + 4Φ16', area: 2060.8847807549046 }\n];\n\n// reinforcementBarTypes.map(item => {\n//   const splitted = item.value.split(' + ');\n//   const splittedObj = splitted.map(val => ({ n: +val.split('Φ')[0], diameter: +val.split('Φ')[1] }));\n\n//   return {\n//     value: item.value,\n//     area: area(splittedObj)\n//   };\n// });\n\n// interface Area {\n//   n: number;\n//   diameter: number;\n// }\n\n// const area = (args: Area[]) => args.reduce((acc, cur) => acc + (cur.n * Math.PI * cur.diameter * cur.diameter) / 4, 0);\n\nexport default reinforcementBarTypes;\n","import * as React from 'react';\nimport { Form, Button, Col, Card } from 'react-bootstrap';\n\nimport reinforcementBarTypes from '../../constants/reinforcementBarTypes';\n\nconst steelGradeOptions = [415, 550];\nconst concreteStressOptions = [15, 20, 25];\n\nconst INITIAL_STATE = {\n  formData: {\n    columnLength: 200,\n    loadOnColumn: 60,\n    columnBreadth: 200,\n    numberOfFloors: 1,\n    gradeOfSteel: steelGradeOptions[0],\n    gradeOfConcrete: concreteStressOptions[0],\n    selectedReinforcementBar: reinforcementBarTypes[0].value\n  },\n  strengthOfColumn: null,\n  safetyFactor: null\n};\n\ninterface State {\n  formData: {\n    columnLength: number;\n    gradeOfSteel: number;\n    loadOnColumn: number;\n    columnBreadth: number;\n    numberOfFloors: number;\n    gradeOfConcrete: number;\n    selectedReinforcementBar: string;\n  };\n  strengthOfColumn: number | null;\n  safetyFactor: number | null;\n}\n\ninterface SafetyFactorFormProps {\n  scrollToBottom: () => void;\n}\n\nclass SafetyFactorForm extends React.Component<SafetyFactorFormProps, State> {\n  constructor(props: SafetyFactorFormProps) {\n    super(props);\n\n    this.state = INITIAL_STATE;\n  }\n\n  _resetForm = () => this.setState({ formData: INITIAL_STATE.formData, strengthOfColumn: null, safetyFactor: null });\n\n  _handleChange = (field: string, value: string) =>\n    this.setState(prevState => ({\n      ...prevState,\n      formData: {\n        ...prevState.formData,\n        [field]: value\n      }\n    }));\n\n  _calculateSafetyFactor = (event: any) => {\n    event.preventDefault();\n\n    const {\n      columnLength,\n      columnBreadth,\n      gradeOfSteel,\n      gradeOfConcrete,\n      loadOnColumn,\n      numberOfFloors\n    } = this.state.formData;\n    const reinforcementBarArea = this._getReinforcementBarArea();\n    const concreteArea = +columnLength * +columnBreadth - reinforcementBarArea;\n\n    const strengthOfColumn = 0.4 * +gradeOfConcrete * concreteArea + 0.67 * +gradeOfSteel * reinforcementBarArea;\n    const safetyFactor = strengthOfColumn / (+loadOnColumn * numberOfFloors * 1000);\n\n    this.setState(\n      prevState => ({\n        ...prevState,\n        safetyFactor,\n        strengthOfColumn\n      }),\n      this.props.scrollToBottom\n    );\n  };\n\n  _getReinforcementBarArea = () => {\n    const selectedReinforcementBar = reinforcementBarTypes.find(\n      bar => bar.value === this.state.formData.selectedReinforcementBar\n    );\n\n    return selectedReinforcementBar ? selectedReinforcementBar.area : 0;\n  };\n\n  render() {\n    const {\n      safetyFactor,\n      strengthOfColumn,\n      formData: {\n        columnLength,\n        gradeOfSteel,\n        loadOnColumn,\n        columnBreadth,\n        numberOfFloors,\n        gradeOfConcrete,\n        selectedReinforcementBar\n      }\n    } = this.state;\n\n    return (\n      <Form>\n        <Form.Group>\n          <Form.Label>Size of column(In mm)</Form.Label>\n          <Form.Row>\n            <Col>\n              <Form.Control\n                type=\"number\"\n                placeholder=\"Length\"\n                value={`${columnLength}`}\n                onChange={(event: any) => this._handleChange('columnLength', event.target.value)}\n              />\n            </Col>\n            <Col>\n              <Form.Control\n                type=\"number\"\n                placeholder=\"Breadth\"\n                value={`${columnBreadth}`}\n                onChange={(event: any) => this._handleChange('columnBreadth', event.target.value)}\n              />\n            </Col>\n          </Form.Row>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Grade of concrete</Form.Label>\n          <Form.Row>\n            <Col>\n              <Form.Control\n                as=\"select\"\n                value={`${gradeOfConcrete}`}\n                onChange={(event: any) => this._handleChange('gradeOfConcrete', event.target.value)}\n              >\n                {concreteStressOptions.map((opt, index) => (\n                  <option key={`concrete-strength-option-${index}`}>{opt}</option>\n                ))}\n              </Form.Control>\n            </Col>\n            <Col>\n              <span className=\"line-40\">\n                N/mm<sup>2</sup>\n              </span>\n            </Col>\n          </Form.Row>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Grade of steel</Form.Label>\n          <Form.Row>\n            <Col>\n              <Form.Control\n                as=\"select\"\n                value={`${gradeOfSteel}`}\n                onChange={(event: any) => this._handleChange('gradeOfSteel', event.target.value)}\n              >\n                {steelGradeOptions.map((opt, index) => (\n                  <option key={`steel-grade-option-${index}`}>{opt}</option>\n                ))}\n              </Form.Control>\n            </Col>\n            <Col>\n              <span className=\"line-40\">\n                N/mm<sup>2</sup>\n              </span>\n            </Col>\n          </Form.Row>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Type of reinforcement bar</Form.Label>\n          <Form.Control\n            as=\"select\"\n            value={`${selectedReinforcementBar}`}\n            onChange={(event: any) => this._handleChange('selectedReinforcementBar', event.target.value)}\n          >\n            {reinforcementBarTypes.map((opt, index) => (\n              <option key={`reinforcement-bar-type-${index}`}>{opt.value}</option>\n            ))}\n          </Form.Control>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Number of floors</Form.Label>\n          <Form.Control\n            type=\"number\"\n            placeholder=\"Number of floors\"\n            value={`${numberOfFloors}`}\n            onChange={(event: any) => this._handleChange('numberOfFloors', event.target.value)}\n          />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Load on column</Form.Label>\n          <Form.Row>\n            <Col>\n              <Form.Control\n                type=\"number\"\n                placeholder=\"Load on column\"\n                value={`${loadOnColumn}`}\n                onChange={(event: any) => this._handleChange('loadOnColumn', event.target.value)}\n              />\n            </Col>\n            <Col>\n              <span className=\"line-40\">KN per floor</span>\n            </Col>\n          </Form.Row>\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\" className=\"mr-10\" onClick={this._calculateSafetyFactor}>\n          Calculate\n        </Button>\n        <Button variant=\"danger\" onClick={this._resetForm}>\n          Reset\n        </Button>\n        {safetyFactor && strengthOfColumn && (\n          <Card className=\"mt-20\">\n            <Card.Header>Result</Card.Header>\n            <Card.Body>\n              <Card.Title>Strength of column</Card.Title>\n              <Card.Text>{strengthOfColumn.toFixed(2)} N</Card.Text>\n              <Card.Title>Safety factor</Card.Title>\n              <Card.Text>{safetyFactor.toFixed(2)}</Card.Text>\n            </Card.Body>\n          </Card>\n        )}\n      </Form>\n    );\n  }\n}\n\nexport default SafetyFactorForm;\n","import SafetyFactorForm from './SafetyFactorForm';\n\nexport default SafetyFactorForm;\n","import * as React from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n\nimport Apps from './Apps';\nimport Header from './Header';\nimport SafetyFactor from './safety-factor';\nimport * as routes from '../constants/routes';\n\ninterface State {\n  bodyHeight: number;\n}\n\nclass Router extends React.Component<{}, State> {\n  scrollbar: Scrollbars | null = null;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      bodyHeight: window.innerHeight\n    };\n  }\n\n  componentDidMount() {\n    this._setBodyHeight();\n  }\n\n  _setBodyHeight = () => {\n    const titleBarElement = document.getElementById('titleBarElement');\n    const titleBarElementHeight = titleBarElement ? titleBarElement.offsetHeight : 0;\n\n    this.setState({ bodyHeight: window.innerHeight - titleBarElementHeight });\n  };\n\n  _scrollToBottom = () => {\n    if (this.scrollbar) {\n      this.scrollbar.scrollToBottom();\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container-main\">\n        <div className=\"main-wrapper\" id=\"mainWrapperElement\">\n          <BrowserRouter>\n            <Header />\n            <Scrollbars\n              style={{ height: this.state.bodyHeight }}\n              ref={scrollbar => {\n                this.scrollbar = scrollbar;\n              }}\n            >\n              <div className=\"p-10\">\n                <Switch>\n                  <Route exact path={routes.HOME} component={Apps} />\n                  <Route\n                    exact\n                    path={routes.SAFETY_FACTOR}\n                    render={() => <SafetyFactor scrollToBottom={this._scrollToBottom} />}\n                  />\n                  <Route path=\"/\" render={() => <Redirect to={routes.HOME} />} />\n                </Switch>\n              </div>\n            </Scrollbars>\n          </BrowserRouter>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport './public';\n\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}